<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ruleset xmlns="http://pmd.sf.net/ruleset/1.0.0" name="ruleset_v01" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">
   <description>BASF NewTP hybris quality ruleset </description>
   <exclude-pattern>.*/Generated/.*</exclude-pattern>
   <exclude-pattern>.*/gensrc/.*</exclude-pattern>
   <rule ref="rulesets/java/braces.xml/IfStmtsMustUseBraces"/>
   <rule ref="rulesets/java/braces.xml/WhileLoopsMustUseBraces"/>
   <rule ref="rulesets/java/braces.xml/IfElseStmtsMustUseBraces"/>
   <rule ref="rulesets/java/braces.xml/ForLoopsMustUseBraces"/>
   <rule ref="rulesets/java/controversial.xml/UnnecessaryConstructor">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/controversial.xml/NullAssignment">
      <priority>5</priority>
   </rule>
   <rule ref="rulesets/java/controversial.xml/AssignmentInOperand">
      <priority>2</priority>
   </rule>
 <!--  <rule ref="rulesets/java/controversial.xml/AtLeastOneConstructor">
      <priority>5</priority>
   </rule> -->
   <rule ref="rulesets/java/controversial.xml/DontImportSun">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/controversial.xml/SuspiciousOctalEscape"/>
   <rule ref="rulesets/java/controversial.xml/CallSuperInConstructor"/>
   <rule ref="rulesets/java/controversial.xml/UnnecessaryParentheses"/>
   <rule ref="rulesets/java/controversial.xml/DefaultPackage"/>
   <rule ref="rulesets/java/controversial.xml/AvoidUsingShortType">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/controversial.xml/AvoidUsingVolatile"/>
   <rule ref="rulesets/java/controversial.xml/AvoidUsingNativeCode">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/controversial.xml/AvoidAccessibilityAlteration"/>
   <rule ref="rulesets/java/controversial.xml/DoNotCallGarbageCollectionExplicitly"/>
   <rule ref="rulesets/java/empty.xml/EmptyCatchBlock">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/empty.xml/EmptyIfStmt"/>
   <rule ref="rulesets/java/empty.xml/EmptyWhileStmt"/>
   <rule ref="rulesets/java/empty.xml/EmptyTryBlock"/>
   <rule ref="rulesets/java/empty.xml/EmptyFinallyBlock"/>
   <rule ref="rulesets/java/empty.xml/EmptySwitchStatements"/>
   <rule ref="rulesets/java/basic.xml/JumbledIncrementer"/>
   <rule ref="rulesets/java/basic.xml/ForLoopShouldBeWhileLoop"/>
   <rule ref="rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary"/>
   <rule ref="rulesets/java/basic.xml/OverrideBothEqualsAndHashcode"/>
   <rule ref="rulesets/java/basic.xml/DoubleCheckedLocking"/>
   <rule ref="rulesets/java/basic.xml/ReturnFromFinallyBlock"/>
   <rule ref="rulesets/java/empty.xml/EmptySynchronizedBlock"/>
   <rule ref="rulesets/java/unnecessary.xml/UnnecessaryReturn"/>
   <rule ref="rulesets/java/empty.xml/EmptyStaticInitializer"/>
   <rule ref="rulesets/java/basic.xml/UnconditionalIfStatement"/>
   <rule ref="rulesets/java/empty.xml/EmptyStatementNotInLoop"/>
   <rule ref="rulesets/java/basic.xml/BooleanInstantiation"/>
   <rule ref="rulesets/java/unnecessary.xml/UnnecessaryFinalModifier"/>
   <!--<rule ref="rulesets/java/basic.xml/CollapsibleIfStatements"/>-->
   <rule ref="rulesets/java/unnecessary.xml/UselessOverridingMethod"/>
   <rule ref="rulesets/java/basic.xml/ClassCastExceptionWithToArray"/>
   <rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
   <rule ref="rulesets/java/unnecessary.xml/UselessOperationOnImmutable"/>
   <rule ref="rulesets/java/basic.xml/MisplacedNullCheck"/>
   <rule ref="rulesets/java/unnecessary.xml/UnusedNullCheckInEquals"/>
   <rule ref="rulesets/java/basic.xml/AvoidThreadGroup"/>
   <rule ref="rulesets/java/basic.xml/BrokenNullCheck"/>
   <rule ref="rulesets/java/basic.xml/BigIntegerInstantiation"/>
   <rule ref="rulesets/java/basic.xml/AvoidUsingOctalValues"/>
   <rule ref="rulesets/java/basic.xml/AvoidUsingHardCodedIP"/>
   <rule ref="rulesets/java/basic.xml/CheckResultSet"/>
   <rule ref="rulesets/java/basic.xml/AvoidMultipleUnaryOperators"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateField"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedLocalVariable"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateMethod"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedFormalParameter"/>
   <rule ref="rulesets/java/logging-java.xml/MoreThanOneLogger"/>
   <rule ref="rulesets/java/logging-java.xml/LoggerIsNotStaticFinal"/>
   <rule ref="rulesets/java/logging-java.xml/SystemPrintln">
   	      <priority>2</priority>
	</rule>
   <rule ref="rulesets/java/logging-java.xml/AvoidPrintStackTrace">
      <priority>2</priority>
   </rule>
   	<rule ref="rulesets/java/strictexception.xml/AvoidLosingExceptionInformation">
	      <priority>2</priority>
	</rule>
   <rule ref="rulesets/java/strictexception.xml/AvoidCatchingThrowable">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/strictexception.xml/SignatureDeclareThrowsException"/>
   <rule ref="rulesets/java/strictexception.xml/ExceptionAsFlowControl">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/strictexception.xml/AvoidCatchingNPE">
  	      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/strictexception.xml/AvoidThrowingRawExceptionTypes">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNullPointerException">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/strictexception.xml/AvoidRethrowingException">
   	      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/strictexception.xml/DoNotExtendJavaLangError">
      <priority>2</priority>
   </rule>
	<!-- <rule ref="rulesets/java/strictexception.xml/AvoidCatchingGenericException">
	      <priority>2</priority>
   </rule> -->
<rule ref="rulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException">
	      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally"/>
   <rule ref="rulesets/java/migrating.xml/ReplaceVectorWithList"/>
   <rule ref="rulesets/java/migrating.xml/ReplaceHashtableWithMap"/>
   <rule ref="rulesets/java/migrating.xml/ReplaceEnumerationWithIterator"/>
   <rule ref="rulesets/java/migrating.xml/AvoidEnumAsIdentifier"/>
   <rule ref="rulesets/java/migrating.xml/AvoidAssertAsIdentifier"/>
   <rule ref="rulesets/java/migrating.xml/IntegerInstantiation"/>
   <rule ref="rulesets/java/migrating.xml/ByteInstantiation"/>
   <rule ref="rulesets/java/migrating.xml/ShortInstantiation"/>
   <rule ref="rulesets/java/migrating.xml/LongInstantiation"/>
   <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseBeforeAnnotation"/>
   <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseAfterAnnotation"/>
   <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseTestAnnotation"/>
   <rule ref="rulesets/java/migrating.xml/JUnit4SuitesShouldUseSuiteAnnotation"/>
   <rule ref="rulesets/java/migrating.xml/JUnitUseExpected"/>
   <rule ref="rulesets/java/design.xml/UseSingleton">
       <priority>5</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/SimplifyBooleanReturns"/>
   <rule ref="rulesets/java/design.xml/SimplifyBooleanExpressions"/>
   <rule ref="rulesets/java/design.xml/SwitchStmtsShouldHaveDefault"/>
   <!--<rule ref="rulesets/java/design.xml/AvoidDeeplyNestedIfStmts"/>-->
   <rule ref="rulesets/java/design.xml/AvoidReassigningParameters"/>
   <rule ref="rulesets/java/design.xml/SwitchDensity"/>
   <rule ref="rulesets/java/design.xml/ConstructorCallsOverridableMethod"/>
   <rule ref="rulesets/java/design.xml/AccessorClassGeneration"/>
   <rule ref="rulesets/java/design.xml/FinalFieldCouldBeStatic"/>
   <rule ref="rulesets/java/design.xml/NonStaticInitializer"/>
   <rule ref="rulesets/java/design.xml/DefaultLabelNotLastInSwitchStmt"/>
   <rule ref="rulesets/java/design.xml/NonCaseLabelInSwitchStatement">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/OptimizableToArrayCall"/>
   <rule ref="rulesets/java/design.xml/BadComparison"/>
   <rule ref="rulesets/java/design.xml/EqualsNull"/>
 <!--  <rule ref="rulesets/java/design.xml/ConfusingTernary">
      <priority>5</priority>
   </rule> -->
    <rule ref="rulesets/java/comments.xml/CommentRequired">
		 <priority>4</priority>
      <properties>
         <property name="fieldCommentRequirement" value="Ignored"/>
         <property name="protectedMethodCommentRequirement" value="Ignored"/>
      </properties>
   </rule>
   <rule ref="rulesets/java/design.xml/InstantiationToGetClass"/>
   <rule ref="rulesets/java/design.xml/IdempotentOperations"/>
   <rule ref="rulesets/java/design.xml/SimpleDateFormatNeedsLocale">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/ImmutableField"/>
   <rule ref="rulesets/java/design.xml/UseLocaleWithCaseConversions">
      <priority>5</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/AvoidProtectedFieldInFinalClass"/>
   <rule ref="rulesets/java/design.xml/AssignmentToNonFinalStatic"/>
   <rule ref="rulesets/java/design.xml/MissingStaticMethodInNonInstantiatableClass"/>
   <rule ref="rulesets/java/design.xml/AvoidSynchronizedAtMethodLevel">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/MissingBreakInSwitch"/>
   <rule ref="rulesets/java/design.xml/UseNotifyAllInsteadOfNotify"/>
   <rule ref="rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause"/>
   <rule ref="rulesets/java/design.xml/AbstractClassWithoutAbstractMethod"/>
   <rule ref="rulesets/java/design.xml/SimplifyConditional"/>
   <rule ref="rulesets/java/design.xml/CompareObjectsWithEquals"/>
   <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInComparisons"/>
   <rule ref="rulesets/java/design.xml/UnnecessaryLocalBeforeReturn">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/NonThreadSafeSingleton"/>
   <rule ref="rulesets/java/design.xml/UncommentedEmptyMethod"/>
   <rule ref="rulesets/java/design.xml/UncommentedEmptyConstructor"/>
   <rule ref="rulesets/java/design.xml/AvoidConstantsInterface"/>
   <rule ref="rulesets/java/design.xml/UnsynchronizedStaticDateFormatter"/>
   <rule ref="rulesets/java/design.xml/PreserveStackTrace"/>
   <rule ref="rulesets/java/design.xml/UseCollectionIsEmpty"/>
   <rule ref="rulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
   <rule ref="rulesets/java/design.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>
   <rule ref="rulesets/java/design.xml/SingularField"/>
   <rule ref="rulesets/java/design.xml/ReturnEmptyArrayRatherThanNull"/>
   <rule ref="rulesets/java/design.xml/AbstractClassWithoutAnyMethod">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/TooFewBranchesForASwitchStatement">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/j2ee.xml/UseProperClassLoader"/>
   <rule ref="rulesets/java/j2ee.xml/DoNotCallSystemExit"/>
   <rule ref="rulesets/java/optimizations.xml/LocalVariableCouldBeFinal"/>
   <rule ref="rulesets/java/optimizations.xml/MethodArgumentCouldBeFinal"/>
  <!-- <rule ref="rulesets/java/optimizations.xml/AvoidInstantiatingObjectsInLoops">
      <priority>3</priority>
   </rule> -->
   <rule ref="rulesets/java/optimizations.xml/UseArrayListInsteadOfVector"/>
   <rule ref="rulesets/java/optimizations.xml/SimplifyStartsWith">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/optimizations.xml/UseStringBufferForStringAppends">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/optimizations.xml/UseArraysAsList"/>
   <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops"/>
   <rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation"/>
   <rule ref="rulesets/java/optimizations.xml/AddEmptyString"/>
   <rule ref="rulesets/java/sunsecure.xml/MethodReturnsInternalArray">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/sunsecure.xml/ArrayIsStoredDirectly">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/coupling.xml/CouplingBetweenObjects"/>
  <!-- <rule ref="rulesets/java/coupling.xml/ExcessiveImports">
   		<properties>
          <property name="minimum" value="40"/>
      </properties>
   </rule> -->
   <!--<rule ref="rulesets/java/coupling.xml/LooseCoupling"/>-->
   <rule ref="rulesets/java/imports.xml/DuplicateImports">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/imports.xml/DontImportJavaLang">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/imports.xml/UnusedImports">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/imports.xml/ImportFromSamePackage"/>
   <rule ref="rulesets/java/imports.xml/TooManyStaticImports">
      <properties>
          <property name="xpath" pluginname="true">
              <value>
                  <![CDATA[
.[count(ImportDeclaration[@Static = 'true']) > 4]
[not (//ClassOrInterfaceDeclaration[//ClassOrInterfaceType[typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[typeof(@Image, 'org.junit.Test', 'Test')]])]
                  ]]>
              </value>
          </property>
      </properties>
   </rule>
   <rule ref="rulesets/java/junit.xml/JUnitStaticSuite"/>
   <rule ref="rulesets/java/junit.xml/JUnitSpelling"/>
   <rule ref="rulesets/java/junit.xml/JUnitAssertionsShouldIncludeMessage">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/junit.xml/JUnitTestsShouldIncludeAssert">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/junit.xml/TestClassWithoutTestCases"/>
   <rule ref="rulesets/java/junit.xml/UnnecessaryBooleanAssertion"/>
   <rule ref="rulesets/java/junit.xml/UseAssertEqualsInsteadOfAssertTrue"/>
   <rule ref="rulesets/java/junit.xml/UseAssertSameInsteadOfAssertTrue"/>
   <rule ref="rulesets/java/junit.xml/UseAssertNullInsteadOfAssertTrue"/>
   <rule ref="rulesets/java/junit.xml/SimplifyBooleanAssertion"/>
   <rule ref="rulesets/java/naming.xml/ShortVariable">
   		<properties>
          <property name="xpath" pluginname="true">
              <value>
                  <![CDATA[
//VariableDeclaratorId[string-length(@Image) < 3]
 [not(ancestor::ForInit)]
 [not((ancestor::FormalParameter) and (ancestor::TryStatement))]
 [not(@Image='tx' or @Image='id' or @Image='pk') ]
                  ]]>
              </value>
          </property>
      </properties>
   </rule>   
   <rule ref="rulesets/java/naming.xml/LongVariable">
      <priority>3</priority>
      <properties>
          <property name="minimum" value="40"/>
          <property name="xpath" pluginname="true">
              <value>
                  <![CDATA[
      //VariableDeclaratorId[string-length(@Image) > $minimum and not(upper-case(@Image)=@Image)]
                  ]]>
              </value>
          </property>
      </properties>
   </rule>
   <rule ref="rulesets/java/naming.xml/ShortMethodName"/>
   <rule ref="rulesets/java/naming.xml/VariableNamingConventions"/>
   <rule ref="rulesets/java/naming.xml/MethodNamingConventions"/>
   <rule ref="rulesets/java/naming.xml/ClassNamingConventions"/>
   <rule ref="rulesets/java/naming.xml/AbstractNaming"/>
   <rule ref="rulesets/java/naming.xml/AvoidDollarSigns">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName"/>
   <rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName"/>
   <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName"/>
   <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName"/>
   <rule ref="rulesets/java/naming.xml/NoPackage">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/naming.xml/PackageCase">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/naming.xml/MisleadingVariableName"/>
   <rule ref="rulesets/java/naming.xml/BooleanGetMethodName"/>
   <!--<rule ref="rulesets/java/codesize.xml/NPathComplexity"/>-->
   <!--<rule ref="rulesets/java/codesize.xml/ExcessiveMethodLength"/>-->
   <rule ref="rulesets/java/codesize.xml/ExcessiveParameterList"/>
  <!--<rule ref="rulesets/java/codesize.xml/ExcessiveClassLength"/>-->
   <!--<rule ref="rulesets/java/codesize.xml/CyclomaticComplexity">
      <priority>3</priority>
	   <properties>
          <property name="reportLevel" value="11"/>
		  <property name="showClassesComplexity" value="true"/>
		  <property name="showMethodsComplexity" value="true"/>
      </properties>
   </rule>-->
   <!--<rule ref="rulesets/java/codesize.xml/ExcessivePublicCount"/>
   <rule ref="rulesets/java/codesize.xml/TooManyFields"/>
   <rule ref="rulesets/java/codesize.xml/NcssMethodCount"/>-->
   <rule ref="rulesets/java/codesize.xml/NcssTypeCount"/>
   <rule ref="rulesets/java/codesize.xml/NcssConstructorCount"/>
   <!--<rule ref="rulesets/java/codesize.xml/TooManyMethods">
      <priority>3</priority>
      <properties>
          <property name="maxmethods" value="20"/>
      </properties>
   </rule>-->
   <rule ref="rulesets/java/finalizers.xml/EmptyFinalizer"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeOnlyCallsSuperFinalize"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeOverloaded"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeDoesNotCallSuperFinalize"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeShouldBeProtected"/>
   <rule ref="rulesets/java/finalizers.xml/AvoidCallingFinalize"/>
   <rule ref="rulesets/java/logging-jakarta-commons.xml/UseCorrectExceptionLogging"/>
   <rule ref="rulesets/java/logging-jakarta-commons.xml/ProperLogger"/>
   <rule ref="rulesets/java/javabeans.xml/MissingSerialVersionUID">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/clone.xml/ProperCloneImplementation"/>
   <rule ref="rulesets/java/clone.xml/CloneThrowsCloneNotSupportedException"/>
   <rule ref="rulesets/java/clone.xml/CloneMethodMustImplementCloneable"/>
   <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/strings.xml/StringInstantiation"/>
   <rule ref="rulesets/java/strings.xml/StringToString"/>
   <rule ref="rulesets/java/strings.xml/InefficientStringBuffering"/>
   <rule ref="rulesets/java/strings.xml/UnnecessaryCaseChange"/>
   <rule ref="rulesets/java/strings.xml/UseStringBufferLength"/>
   <rule ref="rulesets/java/strings.xml/AppendCharacterWithChar"/>
   <rule ref="rulesets/java/strings.xml/ConsecutiveLiteralAppends"/>
   <rule ref="rulesets/java/strings.xml/UseIndexOfChar"/>
   <rule ref="rulesets/java/strings.xml/InefficientEmptyStringCheck">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/strings.xml/InsufficientStringBufferDeclaration"/>
   <rule ref="rulesets/java/strings.xml/UselessStringValueOf"/>
   <rule ref="rulesets/java/strings.xml/StringBufferInstantiationWithChar"/>
   <rule ref="rulesets/java/strings.xml/UseEqualsToCompareStrings"/>
   <rule ref="rulesets/java/strings.xml/AvoidStringBufferField"/>
  
  <!--Best Practice Rule Set-->
    <rule ref="rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop"/>
	<rule ref="rulesets/java/basic.xml/ExtendsObject"/>
	<rule ref="rulesets/java/controversial.xml/AvoidLiteralsInIfCondition"/>
	<rule ref="rulesets/java/controversial.xml/BooleanInversion"/>
	<!-- <rule ref="rulesets/java/controversial.xml/DataflowAnomalyAnalysis"/> -->
	<rule ref="rulesets/java/design.xml/FieldDeclarationsShouldBeAtStartOfClass"/>
	<!--<rule ref="rulesets/java/design.xml/GodClass"/>-->
	<rule ref="rulesets/java/design.xml/LogicInversion"/>
	<rule ref="rulesets/java/design.xml/UseVarargs"/>
	<rule ref="rulesets/java/empty.xml/EmptyInitializer"/>
	<rule ref="rulesets/java/empty.xml/EmptyStatementBlock"/>
	<rule ref="rulesets/java/empty.xml/EmptyStatementNotInLoop"/>
	<rule ref="rulesets/java/empty.xml/EmptyStaticInitializer"/>
	<rule ref="rulesets/java/empty.xml/EmptySwitchStatements"/>
	<rule ref="rulesets/java/empty.xml/EmptySynchronizedBlock"/>
	<rule ref="rulesets/java/empty.xml/EmptyTryBlock"/>
	<rule ref="rulesets/java/empty.xml/EmptyWhileStmt"/>
	<rule ref="rulesets/java/empty.xml/EmptyIfStmt"/>
	<rule ref="rulesets/java/imports.xml/UnnecessaryFullyQualifiedName"/>
	<rule ref="rulesets/java/junit.xml/UseAssertTrueInsteadOfAssertEquals"/>
	<rule ref="rulesets/java/logging-jakarta-commons.xml/GuardDebugLogging"/>
	<rule ref="rulesets/java/naming.xml/GenericsNaming"/>
	<!-- <rule ref="rulesets/java/naming.xml/ShortClassName"/> -->
	<!--<rule ref="rulesets/java/optimizations.xml/PrematureDeclaration"/>-->
	<rule ref="rulesets/java/optimizations.xml/RedundantFieldInitializer"/>
	<rule ref="rulesets/java/typeresolution.xml/CloneMethodMustImplementCloneable"/>
	<!--<rule ref="rulesets/java/typeresolution.xml/LooseCoupling"/>-->
	<rule ref="rulesets/java/typeresolution.xml/SignatureDeclareThrowsException"/>
	<rule ref="rulesets/java/typeresolution.xml/UnusedImports"/>
	<rule ref="rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary"/>
	<rule ref="rulesets/java/unnecessary.xml/UnnecessaryFinalModifier"/>
	<rule ref="rulesets/java/unnecessary.xml/UnnecessaryReturn"/>
	<rule ref="rulesets/java/unnecessary.xml/UnusedNullCheckInEquals"/>
	<rule ref="rulesets/java/unnecessary.xml/UselessOperationOnImmutable"/>
	<rule ref="rulesets/java/unnecessary.xml/UselessOverridingMethod"/>
	<rule ref="rulesets/java/unnecessary.xml/UselessParentheses"/>
	<rule ref="rulesets/java/unusedcode.xml/UnusedModifier"/>
	
	<!--Critical Rule Set-->
	<rule ref="rulesets/java/basic.xml/CheckSkipResult"/>
    <rule ref="rulesets/java/basic.xml/DontCallThreadRun"/>
    <rule ref="rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices"/>
  	<rule ref="rulesets/java/design.xml/CloseResource"/>
	<rule ref="rulesets/java/empty.xml/EmptyCatchBlock"/>
	<rule ref="rulesets/java/empty.xml/EmptyFinallyBlock"/>
	<rule ref="rulesets/java/j2ee.xml/DoNotUseThreads"/>
	
	<!--subjective Rule set-->
	<rule ref="rulesets/java/controversial.xml/AvoidFinalLocalVariable"/>
	<rule ref="rulesets/java/controversial.xml/AvoidPrefixingMethodParameters"/>
	<rule ref="rulesets/java/controversial.xml/OneDeclarationPerLine"/>
	<!--<rule ref="rulesets/java/controversial.xml/UseObjectForClearerAPI"/>-->
	<rule ref="rulesets/java/junit.xml/JUnitTestContainsTooManyAsserts"/>
		
</ruleset>
